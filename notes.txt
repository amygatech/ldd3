
###########################
## Module commands
###########################
depmod - handle dependency descriptions for loadable kernel modules.
insmod - install loadable kernel module.
lsmod - list loaded modules.
modinfo - display information about a kernel module.
modprobe - high level handling of loadable modules.
rmmod - unload loadable modules

============================
Module Configuration Files
============================
* modules.conf - This method load the modules before the rest of the services
* rc.local - Using this method loads the modules after all other services are started


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
###########################
### Chapter 2
###########################
1) Hello workd module
--------------------
cd ldd3/misc-modules

sudo insmod hello.ko
sudo rmmod hello

lsmod | grep hello

-----------------------
su
root# insmod ./hello.ko
Hello, world
root# rmmod hello
Goodbye cruel world
---------------------

*See output kernel
-------------------
tail -f /var/log/kern.log

dmesg | tail -f


@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
###########################
### Chapter 3 
SCULL (Simple Character Utility for Loading Localities)
###########################

* scull is a char driver that acts on a memory area as though it were a device
* The advantage of scull is that it isn’t hardware dependent

* AFter calling insmod, read /proc/devices to see 

cat /proc/devices 


*******************************************************************
* create a special file
--------------------------
//Only executed by root or system group member
mknod Name { b | c } Major Minor

//Creates FIFO (first-in, first-out) files, which are also called pipes or pipelines
mknod Name { p } 

** with flags**
--------------------------
b 	Indicates the special file is a block-oriented device (disk, diskette, or tape).
c 	Indicates the special file is a character-oriented device (other devices).
p 	Creates FIFOs (named pipelines).

*******************************************************************

* wheel group:
--------------
Modern Unix systems generally use user groups as a security protocol to control access privileges.
The wheel group is a special user group used on some Unix system to control access to the su 

* group 0
---------
group 0 had special privileges on many unix variants — either the right to use su to become root.
Basically, the users in group 0 were the system administrators. 
When group 0 has special privileges, it is called wheel


* add pr_debug
https://www.kernel.org/doc/local/pr_debug.txt
-------------
pr_debug()

    Some files call pr_debug(), which is ordinarily an empty macro that discards
    its arguments at compile time.  To enable debugging output, build the
    appropriate file with -DDEBUG by adding

      CFLAGS_[filename].o := -DDEBUG

    to the makefile.


*******************************************
** Some important Data Structure in chapter3
*******************************************
Most of the fundamental driver opera-tions involve three important kernel data structures, 
called file_operations, file, and inode.

1) File Operations
----------------
The file_operations struc-ture is how a char driver sets up this connection. 
The structure, defined in <linux/fs.h>, 
is a collection of function pointers

+ The operations are mostly in charge of implementing 
the system calls and are therefore,named open, read, and so on.

+ Conventionally, a file_operations structure or a pointer to one is called fops

The scull device driver implements only the most important device methods. Its
file_operations structure is initialized as follows:

struct file_operations scull_fops = {
	.owner =    THIS_MODULE,
	.llseek =   scull_llseek,
	.read =     scull_read,
	.write =    scull_write,
	.unlocked_ioctl = scull_ioctl,
	.open =     scull_open,
	.release =  scull_release,
};


2) The File Structure
---------------------
struct file, defined in <linux/fs.h>, is the second most important data structure
used in device drivers.

+ Note that a file has nothing to do with the FILE pointers of user-space programs.
+ The file structure represents an open file
+In the kernel sources, a pointer to struct file is usually called either file or filp (“file pointer”).


3) The inode structure
----------------------
The inode structure is used by the kernel internally to represent files. Therefore, it is
different from the file structure that represents an open file descriptor.

+ The inode structure contains a great deal of information about the file.
As a general rule, only two fields of this structure are of interest for writing driver code:

* dev_t i_rdev;
	For inodes that represent device files, this field contains the actual device number.
* struct cdev *i_cdev;
	struct cdev is the kernel’s internal structure that represents char devices; this
	field contains a pointer to that structure when the inode refers to a char device file




